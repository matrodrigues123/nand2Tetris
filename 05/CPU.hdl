// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Select between A and C instruction types
    Mux16(
        a=false,
        b=instruction,
        sel=instruction[15],
        out[0]=cJGT,
        out[1]=cJEQ,
        out[2]=cJLT,
        out[3]=writeM,
        out[4]=cDestD,
        out[5]=cDestA,
        out[6]=aluNo,
        out[7]=aluF,
        out[8]=aluNy,
        out[9]=aluZy,
        out[10]=aluNx,
        out[11]=aluZx,
        out[12]=cIsM,
        // 13 and 14 are unused
        out[15]=isCType
    );
    Not(in=isCType, out=isAType);

    // A register
    Or(a=cDestA, b=isAType, out=loadA);
    Mux16(a=aluOut, b=instruction, sel=isAType, out=registerAIn);
    ARegister(in=registerAIn, load=loadA, out[0..14]=addressM, out=registerAOut);

    // D register
    DRegister(in=aluOut, load=cDestD, out=registerDOut);

    // A or M
    Mux16(a=registerAOut, b=inM, sel=cIsM, out=inMOrRegAOut);

    // Jump and PC logic
    Or(a=outIsZero, b=outIsNeg, out=ngOrZr);
    Not(in=ngOrZr, out=outIsPos);
 
    And(a=cJEQ, b=outIsZero, out=outEQ);
    And(a=cJLT, b=outIsNeg, out=outLT);
    And(a=cJGT, b=outIsPos, out=outGT);

    Or(a=outGT, b=outLT, out=outLTOrGT);
    Or(a=outLTOrGT, b=outEQ, out=loadPC);

    PC(in=registerAOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // ALU
    ALU(x=registerDOut, y=inMOrRegAOut, zx=aluZx, nx=aluNx, zy=aluZy, ny=aluNy, f=aluF, no=aluNo, out=outM, out=aluOut, zr=outIsZero, ng=outIsNeg);
}